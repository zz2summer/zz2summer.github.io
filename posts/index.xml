<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - 渣渣的夏天</title>
        <link>https://zz2summer.github.io/posts/</link>
        <description>所有文章 | 渣渣的夏天</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>summer2zz@163.com (渣渣的夏天)</managingEditor>
            <webMaster>summer2zz@163.com (渣渣的夏天)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 05 Jul 2022 22:43:35 &#43;0800</lastBuildDate><atom:link href="https://zz2summer.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>LeetCode 之 剑指 Offer 16. 数值的整数次方（Java）</title>
    <link>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-16.-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9java/</link>
    <pubDate>Tue, 05 Jul 2022 22:43:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-16.-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9java/</guid>
    <description><![CDATA[<p>剑指 Offer 16. 数值的整数次方实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。</p>]]></description>
</item><item>
    <title>LeetCode 之 剑指 Offer 15. 二进制中1的个数（Java） </title>
    <link>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-15.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0java/</link>
    <pubDate>Tue, 05 Jul 2022 22:37:29 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-15.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0java/</guid>
    <description><![CDATA[<p>剑指 Offer 15. 二进制中1的个数编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为 汉明重量).）。提示：请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。在 Java 中，编译器使用 二进制补码 记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。</p>]]></description>
</item><item>
    <title>LeetCode 之 剑指 Offer 14  II. 剪绳子 II （Java） </title>
    <link>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-14-ii.-%E5%89%AA%E7%BB%B3%E5%AD%90-ii-java/</link>
    <pubDate>Tue, 15 Mar 2022 10:07:22 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-14-ii.-%E5%89%AA%E7%BB%B3%E5%AD%90-ii-java/</guid>
    <description><![CDATA[<p>LeetCode 之 剑指 Offer 14- II. 剪绳子 II （Java） ，给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 <code>k[0],k[1]...k[m - 1] </code>。请问 <code>k[0]*k[1]*...*k[m - 1]</code> 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p>]]></description>
</item><item>
    <title>LeetCode 之 剑指 Offer 14  I. 剪绳子 （Java） </title>
    <link>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-14-i.-%E5%89%AA%E7%BB%B3%E5%AD%90-java/</link>
    <pubDate>Tue, 15 Mar 2022 10:07:05 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-14-i.-%E5%89%AA%E7%BB%B3%E5%AD%90-java/</guid>
    <description><![CDATA[<p>LeetCode 之 剑指 Offer 14- I. 剪绳子 （Java） ，给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 <code>k[0],k[1]...k[m-1] </code>。请问 <code>k[0]*k[1]*...*k[m-1]</code> 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p>]]></description>
</item><item>
    <title>LeetCode 之 剑指 Offer 13. 机器人的运动范围 （Java）</title>
    <link>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-13.-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4-java/</link>
    <pubDate>Sun, 13 Mar 2022 21:44:39 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-13.-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4-java/</guid>
    <description><![CDATA[<p>LeetCode 之 剑指 Offer 13. 机器人的运动范围（Java），地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</p>]]></description>
</item><item>
    <title>LeetCode 之 剑指 Offer 12. 矩阵中的路径 （Java）</title>
    <link>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-12.-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84-java/</link>
    <pubDate>Sun, 06 Mar 2022 14:20:27 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-12.-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84-java/</guid>
    <description><![CDATA[<p>LeetCode 之 剑指 Offer 12. 矩阵中的路径（Java），给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>]]></description>
</item><item>
    <title>LeetCode 之 剑指 Offer 11. 旋转数组的最小数字（Java）</title>
    <link>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-11.-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97java/</link>
    <pubDate>Sat, 05 Mar 2022 22:37:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-11.-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97java/</guid>
    <description><![CDATA[<p>剑指 Offer 11. 旋转数组的最小数字，把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。给你一个可能存在 重复 元素值的数组 numbers ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一次旋转，该数组的最小值为1。</p>]]></description>
</item><item>
    <title>LeetCode 之 剑指 Offer 10  II. 青蛙跳台阶问题（Java）</title>
    <link>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-10-ii.-%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98java/</link>
    <pubDate>Sat, 05 Mar 2022 22:37:21 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-10-ii.-%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98java/</guid>
    <description><![CDATA[<p>LeetCode 之 剑指 Offer 10- II. 青蛙跳台阶问题（Java），一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。利用函数思维转换为斐波那契数列问题，再采用递归或者记忆化数组解决。</p>]]></description>
</item><item>
    <title>LeetCode 之 剑指 Offer 10  I. 斐波那契数列（Java）</title>
    <link>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-10-i.-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97java/</link>
    <pubDate>Sat, 05 Mar 2022 22:37:20 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-10-i.-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97java/</guid>
    <description><![CDATA[<p>LeetCode 之 剑指 Offer 10- I. 斐波那契数列（Java），写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。最直接的方法当然是用递归，但是递归耗时过多，不适用，本文结合相关题解提供一个记忆化数组的方法进行解决。</p>]]></description>
</item><item>
    <title>LeetCode 之 剑指 Offer 09. 用两个栈实现队列（Java）</title>
    <link>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-09.-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97java/</link>
    <pubDate>Sat, 05 Mar 2022 22:37:19 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://zz2summer.github.io/leetcode-%E4%B9%8B-%E5%89%91%E6%8C%87-offer-09.-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97java/</guid>
    <description><![CDATA[<p>LeetCode 之 剑指 Offer 09. 用两个栈实现队列（Java），用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1。本文讲解实现思路和提供代码参考。</p>]]></description>
</item></channel>
</rss>
